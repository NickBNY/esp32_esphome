esphome:
  name: fireplace
  friendly_name: Fireplace
  on_boot:
    then:
      - light.turn_on:
          id: built_in_led
          brightness: 25%
          red: 100%
          green: 0%
          blue: 0%

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "2v5b4G5z54AfBrXffF6fyVq5QqCUOK2lTj35bhCHZ2w="

ota:
  - platform: esphome
    password: "4bc5a6c308cc36fa7483478a4c56513a"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
################################################
############# START ############################
################################################

font:
  - file: 'ARIAL.TTF'
    id: font1
    size: 10

  - file: 'ARIAL.TTF'
    id: font2
    size: 36

  - file: 'ARIAL.TTF'
    id: font3
    size: 14

################################################
#                  SWITCHES                    #
################################################
switch:
  - platform: gpio
    name: "Relay 1"
    id: fireplace_on_off
    pin:
      number: GPIO32
      inverted: false
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: gpio
    name: "Relay 2"
    id: fireplace_fan
    pin:
      number: GPIO26
      inverted: false
    restore_mode: RESTORE_DEFAULT_OFF

################################################
#                 BINARY SENSORS               #
################################################
binary_sensor:
  - platform: gpio
    name: "Fireplace Control Button"
    id: toggle_button
    pin:
      number: GPIO23
      # If you use an internal pull-up resistor, uncomment below:
      # mode: INPUT_PULLUP
      #pullup: true
      inverted: true
    filters:
      - delayed_on: 50ms
      - delayed_off: 50ms
    on_press:
      # Call the same script from both buttons
      # Turn on both relays
          - logger.log: "BUTTON press"
          - switch.toggle: fireplace_on_off
          - delay: 2s
          - switch.toggle: fireplace_fan
          # Wait 30 minutes, then turn them off
          - delay: 1min
          - logger.log: "30 minutes elapsed: Turning OFF both relays"
          - switch.turn_off: fireplace_on_off
          - delay: 2s
          - switch.turn_off: fireplace_fan


# switch:
#  - platform: gpio
#    pin: GPIO22
#    name: "Garage Door Open Switch"
#    id: open_switch
#  - platform: gpio
#    pin: GPIOXX
#    name: "Garage Door Close Switch"
#    id: close_switch


################################################
#                LED OUTPUT/ LIGHT             #
################################################
output:
  - platform: gpio
    pin: GPIO33
    id: led_output

light:
  - platform: neopixelbus
    id: built_in_led
    name: "Built-in LED"
    pin: GPIO27
    num_leds: 1
    variant: SK6812
    entity_category: diagnostic

time:
  - platform: homeassistant
    id: esptime

sensor:
  - platform: homeassistant
    id: inside_temperature
    entity_id: sensor.hot_tub_current_temperature
    internal: true

  - platform: homeassistant
    id: outside_temperature
    entity_id: sensor.hot_tub_target_temperature
    internal: true 
    
  - platform: homeassistant
    entity_id: sensor.266_home_condition_day_1
    name: "266_home_condition_day_1"
    id: current     
i2c:
  sda: GPIO21
  scl: GPIO25
  scan: false

display:
  - platform: ssd1306_i2c
    model: "SH1106 128x64"
    reset_pin: GPIO22
    address: 0x3C
    lambda: |-
      // Print "Mitt Smarta Hus" in top center.
      // it.printf(64, 0, id(font1), TextAlign::TOP_CENTER, "%s", id(current).state);

      // Print time in HH:MM format
      it.strftime(0, 60, id(font2), TextAlign::BASELINE_LEFT, "%H:%M", id(esptime).now());

      // Print inside temperature (from homeassistant sensor)
      if (id(inside_temperature).has_state()) {
        it.printf(127, 23, id(font3), TextAlign::TOP_RIGHT , "%.1f°", id(inside_temperature).state);
      }

      // Print outside temperature (from homeassistant sensor)
      if (id(outside_temperature).has_state()) {
        it.printf(127, 60, id(font3), TextAlign::BASELINE_RIGHT , "%.1f°", id(outside_temperature).state);
      }
