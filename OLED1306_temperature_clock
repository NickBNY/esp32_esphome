esphome:
  name: fireplace
  friendly_name: AirQuality


esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: ""

ota:
  - platform: esphome
    password: ""

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

font:
  - file: 'ARIAL.TTF'
    id: font1
    size: 12

  - file: 'ARIAL.TTF'
    id: font2
    size: 36

  - file: 'ARIAL.TTF'
    id: font3
    size: 14

  - file: 'ARIAL.TTF'
    id: font4
    size: 8

uart:
  rx_pin: GPIO25
  baud_rate: 9600




#i2c:
# - id: bus_a                                                                                                                                                                                                                                                                                                                                                                                                            
##    sda: GPIO33
#   scl: GPIO22
#    scan: true
  
 # scan: True
 # frequency: 300kHz
 ## - id: bus_b
 # sda1: GPIO19
 # scl1: GPIO23  
time:
  - platform: homeassistant
    id: esptime

i2c:
  - id: bus_a
    sda: GPIO33
    scl: GPIO22
    scan: true
  - id: bus_b
    sda: GPIO19
    scl: GPIO23
    scan: true

sensor:

- platform: aht10
  variant: AHT20
  i2c_id: bus_b
  address: 0x38
  update_interval: 60s
  temperature:
    name: "Indoor Temperature"
    id: temperature
    device_class: temperature
    state_class: measurement
    accuracy_decimals: 0        # Show no decimals
    filters:
      - median:
          window_size: 5
          send_every: 5
          send_first_at: 1
  humidity:
    name: "Indoor Humidity"
    id: humidity
    device_class: humidity
    state_class: measurement
    accuracy_decimals: 0        # Show no decimals
    filters:
      - median:
          window_size: 5
          send_every: 5
          send_first_at: 1
          
- platform: ens160_i2c
  i2c_id: bus_b
  eco2:
      name: "CO2"
  tvoc:
      name: "VOC"
  aqi:
      name: "Air Quality"
  update_interval: 60s
  address: 0x53


- platform: pm1006
  pm_2_5:
   name: "Ikea PM25"
    #- sliding_window_moving_average:
    #   window_size: 10
    #   send_every: 10 


- platform: homeassistant
  id: inside_temperature
  entity_id: sensor.hot_tub_current_temperature
  internal: true
  accuracy_decimals: 0 

- platform: homeassistant
  id: outside_temperature
  entity_id: sensor.hot_tub_target_temperature
  internal: true
  accuracy_decimals: 0 

- platform: homeassistant
  id: gust
  entity_id: sensor.266_home_wind
  internal: true
  accuracy_decimals: 0 

- platform: homeassistant
  entity_id: sensor.266_home_realfeel_temperature
  name: "temp"
  id: temp
  internal: true
  accuracy_decimals: 0 

- platform: homeassistant
  id: pm
  name: pm
  entity_id: sensor.fireplace_ikea_pm25
  internal: true 
       
text_sensor:
  - platform: homeassistant
    id: current 
    entity_id: weather.266_home
    internal: true
 






display:
  - platform: ssd1306_i2c
    i2c_id: bus_a
    model: "SH1106 128x64"
    reset_pin: GPIO26
    address: 0x3C
    lambda: |-
      // Print  send line center
      it.printf(64, 15, id(font1), TextAlign::TOP_CENTER, "%s", id(current).state.c_str());

      // Print time in HH:MM format
      it.strftime(0, 60, id(font2), TextAlign::BASELINE_LEFT, "%H:%M", id(esptime).now());

      // Print inside temperature (from homeassistant sensor)
      if (id(inside_temperature).has_state()) {
        it.printf(127, 30, id(font3), TextAlign::TOP_RIGHT , "%.0f°", id(inside_temperature).state);
      }

      // Print outside temperature (from homeassistant sensor)
      if (id(outside_temperature).has_state()) {
        it.printf(127, 60, id(font3), TextAlign::BASELINE_RIGHT , "%.0f°", id(outside_temperature).state);

      it.strftime(0, 0, id(font1), TextAlign::TOP_LEFT, "%m/%d", id(esptime).now());


      it.printf(95, 0, id(font1), TextAlign::TOP_LEFT, "w: %.1f", id(gust).state); 

      it.printf(58, 0, id(font1), TextAlign::TOP_CENTER, "%.0f°", id(temp).state);

      it.printf(0, 15, id(font1), TextAlign::TOP_LEFT, "%.1f", id(pm).state); 
      }
